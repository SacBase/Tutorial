use Array: all;
use StdIO: all;
use CommandLine: {argc, argv};
use String: {string};

/*
 * ========================================================================
 * Helper functions                                                        
 */
#ifndef RAWIMAGE
use Color8: {newColor};
use PNG: {drawArray};
#endif

#ifdef SIMPLECLOCK
use Clock: {time, gettime, difftime};

int[*], time timestamp( int[*] img)
{
  return( img, gettime());
}

#else /*SIMPLECLOCK*/
use RTClock: {gettime};

int[*], double timestamp( int[*] img)
{
  s, ns = gettime();
  return( img, tod( s) + tod( ns) * 0.000000001d);
}

double difftime( double e, double s)
{
  return( e - s);
}
#endif /*SIMPLECLOCK*/


#ifdef RAWIMAGE
/*
 * Helper to write matrix to file in plain matrix format
 * The produced output (let's say m.dat) can be used with gnuplot like so:
 *
 * gnuplot> plot "m.dat" matrix with image
 *
 */
void write( string fn, int[.,.] m)
{
  err, f = fopen( fn, "w");
  if( SysErr::fail( err)) {
    RuntimeError::error( 1, "\nFailed to open file \"%s\" for writing.\n", fn);
  }
  for( y=0; y<shape(m)[1]; y++) {
    for( x=0; x<shape(m)[0]; x++) {
      fprintf( f, "%d ", m[[x,y]]);
    }
    fprintf( f, "\n");
  }
  fclose( f);
}

#else /*RAWIMAGE*/
/*
 * Helper to write matrix to PNG file. The resulting will be called "result.png".
 */
void write( string fn, int[.,.] m)
{
  m = transpose( m);
  c = { i -> newColor( m[i], m[i], m[i])};
  unused = drawArray( fn, c);
}
#endif /*RAWIMAGE*/


int[.,.] readImage( string fn)
{
  if( fn String::== "") {
    res = FibreScanIntArray( stdin);
  } 
  else {
    err, f = fopen( fn, "r");
    if( SysErr::fail( err)) {
      printf("\nFailed to open \"%s\", expecting data on stdin.\n", fn);
      res = FibreScanIntArray( stdin);
    } 
    else {
      res = FibreScanIntArray( f);
      fclose( f);
    }
  }
  return( res);
}
/*
 * END OF Helper functions
 * ========================================================================
 */


/*
 * Cut off all values that are geq to a given max_val
 * This is used to remove any invalid 8-bit grayscale values (> 255)
 */
inline
int thrs( int val, int max_val)
{
  return( val <= max_val ? val : max_val);
}

inline
int[*] thrs( int[*] vals, int max_val)
{
  res = with{ ( . <= iv <= . ) : thrs( vals[iv], max_val);
        } : genarray( shape( vals), 0); 

  return( res);
}

/*
 * Convolution with given mask 
 */
inline
int[.,.] apply( int[.,.] kernel, int[.,.] img)
{
  /* Generate offset matrix for given kernel 
   * for example, offsets for a 3x3 kernel are as follows:
   *
   * [-1,-1] | [0, -1] | [1, -1]
   * --------+---------+--------
   * [-1, 0] | [0,  0] | [1,  0]
   * --------+---------+--------
   * [-1, 1] | [0,  1] | [1,  1]
   */
  offs = with { (. <= iv <= .) : iv - (shape( kernel)[0]/2);
         } : genarray( shape( kernel), 0*shape( kernel));
 
  /* Add boundary large enough for given kernel */
  b_size = shape(kernel)[0]/2;
  framed = with{ 
             ( 0*shape( img) + b_size <= iv < shape( img)+b_size) : 
               img[iv - b_size];
           } : genarray( shape( img) + 2*b_size, 0); 


  /* apply kernel to framed image */
  res = with { (0*shape(framed)+b_size <= iv < shape( framed)-b_size) : 
                 abs( 
                   sum( 
                     with { ( . <= iiv <= . ) : 
                       kernel[iiv] * framed[iv + offs[iiv]];
                     } : genarray( shape( kernel), 0)
                   )
                 );
        } : modarray( framed);

  /* cut out the tile containing the image */
  return( tile( shape( img), shape( img)*0+b_size, res));
}



int[.,.] sobelEdges( int[.,.] img) 
{
  SY = [
        [1, 2, 1],
        [0, 0, 0],
        [-1, -2, -1]
       ];
  SX = transpose( SY);
  
  resX = apply( SX, img);
  resY = apply( SY, img);

  return( thrs( resX + resY, 255));
}
specialize int[.,.] sobelEdges( int[4288,2848] img);



int[.,.] gaussBlur( int[.,.] img) 
{
  GB = [ 
         [ 1, 2, 1],
         [ 2, 3, 2],
         [ 1, 2, 1]
       ];

  return( apply( GB, img) / sum( GB)); 
}
specialize int[.,.] gaussBlur( int[4288,2848] img); 

int[.,.] gaussBlur25( int[.,.] img) 
{
  GB25 = [
           [ 1, 4, 7, 4, 1],
           [ 4, 20, 33, 20, 4],
           [ 7, 33, 55, 33, 7],
           [ 4, 20, 33, 20, 4],
           [ 1, 4, 7, 4, 1]
         ];
  return( apply( GB25, img) / sum( GB25)); 
}


int main()
{
/*
 * ========================================================================
 * Handling of Command Line Arguments 
 */
  itcount    = 1;
  inputfile  = "";
  outputfile = "result";

  printf( "\nImage Filter (Tutorial Application)"
          "\n==============================================================="
          "\nUsage: %s -c <count> -i <input> -o <output> "
          "\n <count>  : iteration count (default 1)"
          "\n <input>  : name of input file in Fibre format (default: stdin)"
          "\n <output> : name of output file (default: result[.png,.dat])"
          "\n\n", argv( 0));
  
  for( i=1; i<argc()-1; i++) {
    if( argv( i) String::== "-c") {
      itcount = String::toi( argv( i+1));  
    } 
    if( argv( i) String::== "-o") {
      outputfile = argv( i+1);
    }
    if( argv( i) String::== "-i") {
      inputfile = argv( i+1);
    }
  }
#ifdef RAWIMAGE
  outputfile = outputfile String::+".dat";
#else
  outputfile = outputfile String::+".png";
#endif
  printf( "\n---------------------------------------------------------------"
          "\nIterations: %d, Input: \"%s\", Output: \"%s\""
          "\n---------------------------------------------------------------\n",
          itcount, 
          (inputfile String::== "") ?  "stdin" : inputfile, 
          outputfile);
/*
 * END OF Handling of Command Line Arguments
 * ========================================================================
 */


  fprintf( stderr, "\nReading image ...\n");

  img = readImage( inputfile);
  
  fprintf( stderr, "\nApplying filter %d time(s)...", itcount);
  img, start = timestamp( img);
  for( i=0; i<itcount; i++) {
#ifdef GAUSS
  img = gaussBlur( img);
#elif defined GAUSS25
  img = gaussBlur25( img);
#else
  img = sobelEdges( img);
#endif
  }
  img, end = timestamp( img);
  fprintf( stderr, "  finished after %fs\n", difftime( end, start));
  
  fprintf( stderr, "\nWriting result image ...\n");
  
  write( outputfile, img);
  return( 0);
}



