#######################################################################################
#
# variables - mandatory:
# ======================
#
# variables - optional:
# =====================
# $(EXCLUDE_FILES)	undef		.sac files which shall be excluded from
#					compilation
#
# $(TARGETDIR)		.		path from src to executable files
# $(LIBTARGETDIR)	.		path from src to .lib / .a files
# $(INCTARGETDIR)	.		path from src to .h files
# $(LIBDOCDIR)          doc             path from .sac to .tex/.html file(s)
# $(SUBDIRS)		undef		(sub-)directories to propagate make into
# $(MAKE_NON_LOCAL_DEPENDENCIES)
#                       undef		propagate make into non-local modul-source-
#                                       directories iff $(MAKE_NON_LOCAL_DEPENDENCIES)
#                                       == yes. Mostly needed for stdlib!
# $(TARFILENAME)	srcs.tar	name of the tar file generated by 'make tar'
# $(LIBDOCFILENAME)	libdoc.html	name of the html file containing all the 
#                                       .dec files as verbatim's.
#
# standard targets:
# =================
# gmake			 compile all files
# gmake clean_local	 locally clean up everything that belongs to the compilation of
#                        sac files
# gmake cleantime_local	 locally clean up everything that belongs to time measurements
# gmake cleancheck_local locally clean up everything that belongs to the checksac2c/checkres
#                        mechanism
# gmake clean		 same as std_clean, but propagate to subdirs
# gmake cleantime	 same as std_cleantime_local, but propagate to subdirs
# gmake cleancheck	 same as std_cleancheck_local, but propagate to subdirs
# gmake cleanall	 same as clean + cleantime + cleancheck
# gmake touch		 touch all source files
# gmake tar		 collect all sources, i.e., *.sac *.dec *.[ch] *.[ly] Makefile
#			 Makefiles/* (w\o *RCS*) Scripts/* (w\o *RCS*) README*, in a
#			 tar-file.
#			 ATTENTION: if SUBDIRS is used, the resulting tar-file has to
#                        be unpacked by 'gmake untar' since it recursively contains
#			 tar-files!
# gmake untar		 untar tar-files generated by 'gmake tar'
# gmake libdoc		 generate $(LIBDOCFILENAME) in $(LIBDOCDIR) from recursively
#                        inspecting all $(SUBDIRS).
# gmake libdoc_clean	 recursively removes all libdoc-directories!
#			 BEWARE, if $(LIBDOCDIR) is "." !!
#
#######################################################################################

#######################################################################################
#
# make sure that Makefile.standard is not included more than once!
# ( necessary since Makefile.time and Makefile.check both include 
#   Makefile.standard but can be included from a single Makefile )
#

ifndef STDMKFILE
STDMKFILE = "already included"

#######################################################################################
#
# preset optional pathes first:
#   - TARGETDIR   : where to put  XYZ           if XYZ.sac is in the actual directory
#   - LIBTARGETDIR: where to put  XYZ.lib/XYZ.a if XYZ.sac is in the actual directory
#   - INCTARGETDIR: where to put  XYZ.h         if XYZ.sac is in the actual directory
#   - LIBDOCDIR   : where to put  XYZ.tex       if XYZ.sac is in the actual directory
#
# optional pathes which are not preset:
#   - SUBDIRS     : subdirs where make is propagated into
#

ifndef TARGETDIR
TARGETDIR = .
endif

ifndef LIBTARGETDIR
LIBTARGETDIR = .
endif

ifndef INCTARGETDIR
INCTARGETDIR = .
endif

ifndef LIBDOCDIR
LIBDOCDIR = doc
endif

ifndef TARFILENAME
TARFILENAME = srcs.tar
endif

ifndef LIBDOCFILENAME
LIBDOCFILENAME = libdoc.html
endif

#######################################################################################
#
# general presettings:
#

MAKEFLAGS += --no-print-directory -r
LF_EXT = .saclog

include $(SACBASE)/stdlib/Makefiles/Makefile.Config

#
# extend the standard libraries by the actual environment variables:
#

LIBDIR    += $(subst :, , $(SAC_LIBRARY_PATH))

vpath %.lib $(LIBDIR)
vpath %.a   $(LIBDIR)

#######################################################################################
#
# automatic target detection by source file analysis:
#

SAC_FILES  := $(filter-out $(basename $(EXCLUDE_FILES)), $(basename $(wildcard *.sac)))
FILES      := $(foreach file,$(SAC_FILES), \
               $(shell if \
[ "`egrep '(module[ \n]*$(file)[ \n]*;)|(class[ \n]*$(file)[ \n]*;)' $(file).sac`"  = "" ];\
                       then echo $(file);\
                       fi))
FILETARGETS   := $(patsubst %,$(TARGETDIR)/%, $(FILES))
MODS          := $(filter-out $(FILES), $(SAC_FILES))
MODTARGETS    := $(patsubst %,$(LIBTARGETDIR)/lib%Tree$(SHARED_LIB_EXT), $(MODS))


#
# in case of MAKE_NON_LOCAL_DEPENDENCIES == yes, switch from $(FILETARGETS) $(MODTARGETS)
# to dummy-targets .D and .libD
# that allows dependency makes to be sorted by targets (nice indenting 8-)
#

ifeq ("$(MAKE_NON_LOCAL_DEPENDENCIES)", "yes")

FILETARGETS_D    = $(addsuffix .D, $(FILES))
MODTARGETS_D     = $(patsubst %,%.libD, $(MODS))

#
# default target definition in case of MAKE_NON_LOCAL_DEPENDENCIES == yes:
#
standard_all: $(FILETARGETS_D) $(MODTARGETS_D)

else

#
# normal default target definition:
#

standard_all: $(FILETARGETS) $(MODTARGETS)

endif


#######################################################################################
#
# basic pattern rules for libs, files, and dependency files
#

ifeq ("$(MAKE_MT_ALSO)", "yes")
$(LIBTARGETDIR)/lib%Tree$(SHARED_LIB_EXT)  \
$(LIBTARGETDIR)/lib%Mod$(SHARED_LIB_EXT) $(LIBTARGETDIR)/lib%Mod.a: %.sac
	@ $(MKDIR) $(LIBTARGETDIR)
	$(SAC2C) $(SAC2CFLAGS) -mt -o $(LIBTARGETDIR) $<
	@touch $@
	$(CLOCK_SKEW_ELIMINATION) $@
else
$(LIBTARGETDIR)/lib%Tree$(SHARED_LIB_EXT)  \
$(LIBTARGETDIR)/lib%Mod$(SHARED_LIB_EXT) $(LIBTARGETDIR)/lib%Mod.a: %.sac
	@ $(MKDIR) $(LIBTARGETDIR)
	$(SAC2C) $(SAC2CFLAGS) -o $(LIBTARGETDIR) $<
	@touch $@
	$(CLOCK_SKEW_ELIMINATION) $@
endif


$(LIBTARGETDIR)/lib%.a $(INCTARGETDIR)/%.h: %.sac
	@ $(MKDIR) $(LIBTARGETDIR)
	@ $(MKDIR) $(INCTARGETDIR)
	$(SAC2C) $(SAC2CFLAGS) -genlib c -o $(LIBTARGETDIR) $<
	@ if [ "$(LIBTARGETDIR)" != "$(INCTARGETDIR)" ]; then \
	    $(MV) $(LIBTARGETDIR)/$*.h $(INCTARGETDIR); \
	  fi
	$(CLOCK_SKEW_ELIMINATION) $@


#
# the next variant is usefull in the sac_from_c case, since the implicit dependency
# generation/checking mechanism does not work in that situation!
#
$(LIBTARGETDIR)/lib%.a $(INCTARGETDIR)/%.h: $(LIBSRCDIR)/%.sac
	$(MAKE) $*.aD
	$(CLOCK_SKEW_ELIMINATION) $@


$(TARGETDIR)/%: %.sac
	@ $(MKDIR) $(TARGETDIR)
	-$(SAC2C) $(SAC2CFLAGS) -o $@ $<
	$(RM) $(TARGETDIR)/$*.c
	@ $(ECHO) "$(SAC2C) $(SAC2CFLAGS) -o $@ $<" >.$*$(LF_EXT)
	@ $(SAC2C) -V >> .$*$(LF_EXT)
	$(CLOCK_SKEW_ELIMINATION) $@


$(TARGETDIR)/%_mt: %.sac
	@ $(MKDIR) $(TARGETDIR)
	-$(SAC2C) $(SAC2CFLAGS) -mt -o $@ $<
	$(RM) $(TARGETDIR)/$*_mt.c
	@ $(ECHO) "$(SAC2C) $(SAC2CFLAGS) -mt -o $@ $<" >.$*_mt$(LF_EXT)
	@ $(SAC2C) -V >> .$*_mt$(LF_EXT)
	$(CLOCK_SKEW_ELIMINATION) $@


#
# the following rule generates the dependency files.
# For those that are scared by sed scripts here some hints:
# Each of the lines starting with -e fulfills ONE specific task.
#  line 1: substitute   lib<module>$(SHARED_LIB_EXT)   by   $(LIBTARGETDIR)/lib<module>$(SHARED_LIB_EXT)
#  line 2: change lib/*/<module>.sac dependencies into lib/*/$(LIBTARGETDIR)/lib<module>$(SHARED_LIB_EXT)
#  line 3: change ./<module>.sac dependencies into ./$(LIBTARGETDIR)/lib<module>$(SHARED_LIB_EXT)
#  line 4: enwrap the PHONY targets by ifndefs
#  line 5: eliminate tmp_mnt parts in paths
#  line 6: replace a.out by the target name
#  line 7: introduce proper indenting on recursive dependency makes
#
.%.d: %.sac
	@$(ECHO) "$(SAC2C) $(SAC2CMLIB) $(SAC2CFLAGS) $<  > $@"
	@if $(SAC2C) $(SAC2CMLIB) $(SAC2CFLAGS) $<  > $@d ; \
         then sed -e 's/lib\($*\)\$(SHARED_LIB_EXT) lib\($*\)\.a[ :]*/\$$\(LIBTARGETDIR\)\/lib$*\Tree$(SHARED_LIB_EXT) \$$\(LIBTARGETDIR\)\/lib$*\.a \:/' \
                  -e '/lib/{N;s/\/\([^ ]*\)\/\([^ \/]*\)\.sac/\/\1\/\$$\(LIBTARGETDIR\)\/lib\2Tree$(SHARED_LIB_EXT)/;}' \
                  -e '/\.\//{N;s/\.\/\([^ \/]*\)\.sac/\.\/\$$\(LIBTARGETDIR\)\/lib\1Tree$(SHARED_LIB_EXT)/;}' \
		  -e '/.* :/{N;s/\(.*\):\(.\)\(.\)( cd\(.*\); \$$(MAKE) lib\(.*\)$(SHARED_LIB_EXT))$$/ifndef __\1\2__\1 = yes\2\1:\2\3@ (cd\4; \$$(MAKE) \5.libD)\2endif/;}' \
		  -e 's/tmp_mnt\///' \
	          -e 's/a.out/$*/' \
                  -e 's/MAKE)/MAKE) INDENT="\$$\(INDENT\)---"/'  <$@d >$@;\
              $(RM) $@d ; \
         else $(RM) $@d ; \
              exit 1 ;  \
         fi
	$(CLOCK_SKEW_ELIMINATION) $@


#######################################################################################
#
# automatic dependency updating mechanism:
#   gmake implicitly remakes all files that are included!
#

DEPS       = $(patsubst %,.%.d, $(SAC_FILES))


ifneq ($(DEPS),)
  ifneq ($(TARGET),clean)
    ifneq ($(TARGET),clean_local)
      ifneq ($(TARGET),distclean)
        ifneq ($(TARGET),tar)
          ifneq ($(TARGET),untar)
-include $(DEPS)
          endif
        endif
      endif
    endif
  endif
endif

#######################################################################################
#
# standard targets for handling a project
#

$(SACBASE)/stdlib/Makefiles/Makefile.Config: $(SACBASE)/stdlib/Makefiles/Makefile.Config.in
	(cd $(SACBASE)/stdlib; \
         ./configure )

clean_local:
	$(RM) $(FILETARGETS) *.bak *~ a.out* $(addsuffix .c,$(FILETARGETS)) \
	      $(VERSIONTARGETS) $(MODTARGETS) $(C_MODTARGETS) $(OBJECTS) \
	      $(patsubst %,$(INCTARGETDIR)/%.h,$(MODS)) \
	      $(patsubst %,$(LIBTARGETDIR)/lib%Mod.a,$(MODS)) \
	      $(patsubst %,$(LIBTARGETDIR)/lib%Mod$(SHARED_LIB_EXT),$(MODS)) \
	      $(patsubst %,$(LIBTARGETDIR)/lib%Tree$(SHARED_LIB_EXT),$(MODS)) \
              lex.*.c *.tab.[ch] *.output \
	      $(patsubst %,.%$(LF_EXT),$(FILES)) $(patsubst %,.%$(TMP_EXT),$(FILES)) \
	      $(patsubst %,.%$(TMP2_EXT),$(FILES)) \
	      $(patsubst %,.%$(LF_EXT),$(VERSIONNAMES)) $(patsubst %,.%$(TMP_EXT),$(VERSIONNAMES)) \
	      $(patsubst %,.%$(TMP2_EXT),$(VERSIONNAMES)) \
	      *.tar
	-$(RM) $(DEPS) $(C_DEPS) $(VERS)
	-$(RM) $(CLOG_FILES) $(RES_FILES)

# Don't call 'make' after clean_local has been made! Otherwise, $(DEPS), $(C_DEPS), 
# and $(VERS) will be created again!


cleantime_local:
	-$(RM) $(TIME_FILES)
#	-$(RMDIR) $(TIMESDIR)

cleancheck_local:
	-$(RM) $(CLOG_FILES) $(addsuffix .base,$(CLOG_FILES))
	-$(RM) $(RES_FILES) $(addsuffix .base,$(RES_FILES))
	-$(RMDIR) $(CHECKDIR)

std_clean_propogate: 
	$(MAKE) subdirs TARGET="clean"
	$(MAKE) clean_local

clean: 
	$(MAKE) subdirs TARGET="clean"
	$(MAKE) clean_local

cleancheck:
	$(MAKE) subdirs TARGET="cleancheck"
	$(MAKE) cleancheck_local

cleantime:
	$(MAKE) subdirs TARGET="cleantime"
	$(MAKE) cleantime_local

cleanall:
	$(MAKE) subdirs TARGET="cleanall"
	$(MAKE) cleancheck_local
	$(MAKE) cleantime_local
	$(MAKE) clean_local

touch:
	touch $(wildcard *.sac)
	$(MAKE) subdirs TARGET="touch"


tar:
	$(MAKE) subdirs TARGET="tar"
	@ ( TAR_FILES=`$(LS) $(filter-out Scripts/RCS%, $(wildcard Scripts/*)) \
	                     $(filter-out Makefiles/RCS%, $(wildcard Makefiles/*)) \
	                     $(filter-out config/RCS%, $(wildcard config/*)) \
	                     Makefile README* configure configure.ac\
	                     *.sac *.dec *.[ch] *.[ly] *.spec *.mac\
	                     *.inp* *.inps* *.vers $(CHECKDIR)/*.base \
	                     $(patsubst %,%/*.tar, $(SUBDIRS)) \
	                     $(patsubst %,%/Makefile, $(SUBDIRS)) 2> /dev/null`; \
	    if [ "$${TAR_FILES}x" != "x" ]; \
	    then $(TAR) cvf $(TARFILENAME)  $${TAR_FILES}; \
	         $(RM) $(patsubst %,%/*.tar, $(SUBDIRS)); \
	    fi)

untar:
	@ ( TAR_FILES=`$(TAR) tvf $(TARFILENAME) | $(AWK) '{print $$NF}'`; \
	    for file in $${TAR_FILES}; do \
	      if [ ! -f $${file} ]; \
	      then UNTAR_FILES="$${UNTAR_FILES} $${file}"; \
	      fi \
	    done; \
	    if [ "$${UNTAR_FILES}x" != "x" ]; \
	    then $(TAR) xmvf $(TARFILENAME) $${UNTAR_FILES}; \
	         $(RM) $(TARFILENAME);\
	    fi)
	$(MAKE) subdirs TARGET="untar"



#######################################################################################
#
# This part is needed for generating documentation files from .dec files.
#

#
# general presettings needed:
#

ACT_DIR       := $(shell pwd)
ACTDIR_NAME   := $(notdir $(shell pwd))
LIBDOCTEXFILE := $(ACT_DIR)/$(LIBDOCDIR)/$(patsubst %.html,%.tex,$(LIBDOCFILENAME))

#
# target detection for module/class documentation:
#

LIBDOCTARGETS := $(patsubst %,$(LIBDOCDIR)/%.tex, $(MODS))


#
# pattern rules for generating .tex files from .dec files and
#                              .html files from .tex files!
#

$(LIBDOCDIR)/%.tex: %.sac
	@ $(MKDIR) $(LIBDOCDIR)
	@ $(ECHO) '\\begin{verbatim}' > $@
	@ $(SAC2TEX) $< >> $@
	@ $(ECHO) '\\end{verbatim}' >> $@
	$(CLOCK_SKEW_ELIMINATION) $@


#
# mechanism for generating TeX-headings in descending order:
#

PARM        := chapter

ifeq ($(PARM),chapter)
  LIBDOCLEVEL = section
else                        # may happen due to recursive call with PARM=...
  ifeq ($(PARM),section)
    LIBDOCLEVEL = subsection
  else
    ifeq ($(PARM),subsection)
      LIBDOCLEVEL = subsubsection
    else
      ifeq ($(PARM),subsubsection)
        LIBDOCLEVEL = paragraph
      else
        ifeq ($(PARM),paragraph)
          LIBDOCLEVEL = subparagraph
        endif
      endif
    endif
  endif
endif


#
# targets for handling the lib-documentation:
#   Note here, that sublibdoc is a dummy target which should not be invoked directly!
#

libdoc:
	@ $(MKDIR) $(LIBDOCDIR)
	@ if [ "$(LIBDOCFILENAME)" = "" ]; \
	  then $(ECHO) LIBDOCFILENAME not defined! >&2; \
	       exit 1 ; \
	  fi

	@ $(ECHO) '\\documentclass{report}' >$(LIBDOCTEXFILE)
	@ $(ECHO) '\\usepackage{html}' >>$(LIBDOCTEXFILE)
	@ $(ECHO) '\\begin{document}' >> $(LIBDOCTEXFILE)

	@ $(MAKE) sublibdoc LIBDOCTEXFILE="$(LIBDOCTEXFILE)"

	@ $(ECHO) '\\end{document}' >> $(LIBDOCTEXFILE)

	$(ECHO) 'HTML_LINK_DIR = docs' >$(LIBDOCDIR)/Makefile
	$(ECHO) 'DVI_LINK_DIR  = docs' >>$(LIBDOCDIR)/Makefile
	$(ECHO) 'PS_LINK_DIR   = docs' >>$(LIBDOCDIR)/Makefile
	$(ECHO) 'GIF_LINK_DIR  = docs' >>$(LIBDOCDIR)/Makefile
	$(ECHO) 'PNG_LINK_DIR  = docs' >>$(LIBDOCDIR)/Makefile
	$(ECHO) 'include $$(SACBASE)/stdlib/Makefiles/Makefile.docs' \
	          >>$(LIBDOCDIR)/Makefile

	$(MAKE) -C $(LIBDOCDIR) LATEX2HTMLFLAGS="$(LATEX2HTMLFLAGS)"


sublibdoc: 
	@ $(ECHO) '\\$(PARM){$(ACTDIR_NAME)}' >> $(LIBDOCTEXFILE)
ifneq ($(MODS),)
	$(MAKE) $(LIBDOCTARGETS)
	@ for dec_file in $(MODS); do \
	    $(ECHO) "\\$(LIBDOCLEVEL){$${dec_file}.sac}" >> $(LIBDOCTEXFILE); \
	    $(ECHO) "\\input{$(ACT_DIR)/$(LIBDOCDIR)/$${dec_file}.tex}" \
	            >> $(LIBDOCTEXFILE); \
	  done;
	@ $(MAKE) subdirs TARGET="sublibdoc" PARM="$(LIBDOCLEVEL)"
else
	@ $(MAKE) subdirs TARGET="sublibdoc" PARM="$(LIBDOCLEVEL)"
endif


libdoc_clean:
	$(RM) doc
	@ $(MAKE) subdirs TARGET="libdoc_clean"



#######################################################################################
#
# this part is needed only in case MAKE_NON_LOCAL_DEPENDENCIES == yes
#

ACTDIR     := $(patsubst %/stdlib/,, $(subst stdlib/,stdlib/ , $(shell pwd)))

#
# .D dummy-targets force a remake of non-local .lib files:
#    ( The alldeps_$* rule is specified in $*.d and invokes
#      gmake XYZ.libD where XYZ.sac is found )
#

%.D: %.sac
	@ $(MAKE) out1 modname_long=\($(TARGETDIR)/\)$*
	@ $(MAKE) alldeps_$*
	@ $(MAKE) out2 modname_long=\($(TARGETDIR)/\)$*
	@ $(MAKE) $(TARGETDIR)/$*

#
# .libD dummy-targets are very similar to .D dummy targets
#       the only difference is that $* itself is a module:
#

%.libD: %.sac
	@ $(MAKE) out1 modname_long=\($(LIBTARGETDIR)/\)lib$*$(SHARED_LIB_EXT)
	@ $(MAKE) alldeps_$*
	@ $(MAKE) out2 modname_long=\($(LIBTARGETDIR)/\)lib$*$(SHARED_LIB_EXT)
	@ $(MAKE) $(LIBTARGETDIR)/lib$*$(SHARED_LIB_EXT)

#
# .aD dummy-targets are .libD targets for sac modules that are
#     to be compiled to C. (-genlib c)
#

%.aD: %.sac
	@ $(MAKE) out1 modname_long=\($(LIBTARGETDIR)/\)lib$*.a
	@ $(MAKE) alldeps_$*
	@ $(MAKE) out2 modname_long=\($(LIBTARGETDIR)/\)lib$*.a
	@ $(MAKE) $(LIBTARGETDIR)/lib$*.a

out1:
	@$(ECHO) '******************************************************************'
	@$(ECHO) '*** $(ACTDIR)/$(modname_long) : checking dependencies'
	@$(ECHO) '******************************************************************'

out2:
	@$(ECHO) '******************************************************************'
	@$(ECHO) '*** $(ACTDIR)/$(modname_long) : '
	@$(ECHO) '******************************************************************'

#######################################################################################
#
# this part is needed for propagating make into subdirs!
#

standard_all: subdirs

subdirs:
	@ if [ "$(SUBDIRS)x" != "x" ]; \
	  then for d in $(SUBDIRS)""  ; do \
	         $(MAKE) -C $${d} TARGET="$(TARGET)" PARM="$(PARM)" $(TARGET); \
	       done; \
	  fi

endif    # ifndef STDMKFILE



