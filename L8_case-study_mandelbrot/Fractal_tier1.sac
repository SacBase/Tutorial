module Fractal_tier1;

use Structures: all;
use Numerical: all;

export all;


/** <!--*******************************************************************-->
 * 
 * @fn : complex[2:shp] genComplexArray( int[2] shp, complex cmin, complex cmax)
 *
 *   @brief generates an array of complex numbers with shape "shp" and 
 *          linearly increasing/decreasing values between "cmin" and "cmax".
 *          The element at index [0,0] should be "cmin". Increases in the
 *          2nd index (!) should reflect increases in the real values!
 *
 *****************************************************************************/
inline
complex[2:shp] genComplexArray( int[2] shp, complex cmin, complex cmax)
{
    diff = cmax - cmin;
    delta = [imag (diff) / tod( shp[0]) , real (diff) / tod (shp[1])];

    return { iv ->  cmin + toc (tod (iv) * delta) | iv < shp };
}


/** <!--*******************************************************************-->
 * 
 * @fn int escapeTime(complex z, int depth)
 *
 *   @brief iteratively computes c = c*c + z starting from c=z.
 *          terminates either when |c| > 2 or depth iterations
 *          have been performed.
 *          NB: Besides "norm" there exists "normSq" which computes |c|^2.
 *
 *   @return number of iterations done
 *****************************************************************************/
inline
int escapeTime(complex z, int depth)
{
    i=0; c=z;

    while( (normSq( c) <= 4d) && (i <= depth)) {
        c=c*c+z; i++;
    }

    return(i);
}

/** <!--*******************************************************************-->
 *
 * @fn int[n:shp] escapeTime(complex[n:shp] z, int depth)
 *
 *   @brief maps escapeTime to an entire array of complex numbers
 *
 *****************************************************************************/

inline
int[n:shp] escapeTime( complex[n:shp] plane, int depth)
{
    return { iv -> escapeTime (plane[iv], depth) };
}

/** <!--*******************************************************************-->
 *
 * @fn color[.,.] intArrayToMonochrome( int[.,.] a)
 *
 *   @brief converts non-negative integer values into color values using
 *          a logarithmic 256 element clut from black to red.
 *****************************************************************************/
inline
Color8::color[.,.] intArrayToMonochrome( int[.,.] a)
{
    clut = genLogarithmicClut( 0.4d, 0.9d, Color8::black(), Color8::red());

    a = (a * 255) / maxval(a);

    return { iv -> clut[ a[ iv]] };

  return( d);
}

