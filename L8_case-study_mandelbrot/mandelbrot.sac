#define XRES 3
#define YRES 3
#define EXPAND 128

#define DEPTH 1024

#ifndef TIER
#define TIER 3
#endif

use Structures: all;
use SDLdisplay: all;
use StdIO : all;

use Fractal_tier1 : all;
use Fractal_tier2 : all;
use Stencil_tier3 : all;

inline
color[.,.] stretchRgb( color[.,.] pic, int stretch)
{
  res = with {
          (. <= iv <= .): pic[ iv / stretch];
        } : genarray( shape(pic) * stretch, black());
  return( res);
}

/* Main ******************************************************************** */

int main()
{
  
  xc = -0.87591d;
  yc = 0.20464d;
  d = 0.53184d;

  expand = EXPAND;
  max_shape = [YRES,XRES] * expand;

  disp = initMultiDisplay( [2,2], max_shape);

  cmin = toc( xc - 0.5d * d, yc - 0.5d * d);
  cmax = toc( xc + 0.5d * d, yc + 0.5d * d);
  

#ifdef INTERACTIVE_ZOOM
  zoom_coords = genarray( [2,2], 0);
  plane = genarray( [YRES,XRES], toc( 0d));

  while( true) {
    cmin = all( zoom_coords[[0]] == 0) ? cmin : plane[ zoom_coords[0]];
    cmax = all( zoom_coords[[1]] == 0) ? cmax : plane[ zoom_coords[1]];
    plane = genComplexArray( [YRES,XRES], cmin, cmax);
    expand = EXPAND;
#else
  plane = genComplexArray( [YRES,XRES], cmin, cmax);
#endif
    while( expand >= 1) {
      print( cmin);
      print( cmax);
      printf( "\n");
      ts = escapeTime( plane, DEPTH);
  
      rgbs = intArrayToMonochrome( ts);
  
      drawArrayMulti( disp, stretchRgb( rgbs, expand), [0,0]);
  
#if TIER >= 2
      ts, vs = escapeTimeAndValue( plane, DEPTH);
  
      nvs = normalizedIterationCount( ts, vs);
      rgbs = doubleArrayToRGB( nvs);
    
      drawArrayMulti( disp, stretchRgb( rgbs, expand), [1,0]);
  
#if TIER >= 3
  
      rgbs = gaussBlur( gaussBlur25( rgbs));
  
      drawArrayMulti( disp, stretchRgb( rgbs, expand), [0,1]);
  
      rgbs = sobelEdges( rgbs);
  
      drawArrayMulti( disp, stretchRgb( rgbs, expand), [1,1]);
#endif
#endif
  
      expand = expand / 2;
      plane = genComplexArray( 2*shape(plane), cmin, cmax);
    }

#ifdef INTERACTIVE_ZOOM
    q, zoom_coords = getSelectionMulti( disp, [2,2]);
  }
#else
    wait = StdIO::fgetc( StdIO::stdin);
#endif

    destroyDisplay( disp);

  return(0);
}

