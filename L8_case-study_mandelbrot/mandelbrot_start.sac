#define XRES 384
#define YRES 256

#define DEPTH 1024

#ifndef TIER
#define TIER 1
#endif

use Structures: all;
use SDLdisplay: all;
use StdIO : all;

use Fractal_tier1 : all;
use Fractal_tier2 : all;
use Stencil_tier3 : all;

/* Main ******************************************************************** */

int main()
{
  disp = initMultiDisplay( [2,2], [YRES,XRES]);

  cmin = [toc( -2.2, 1.0)];
  cmax = [toc( 0.8, -1.0)];
  
  while( true) {
    plane = genComplexArray( [YRES,XRES], cmin[[0]], cmax[[0]]);

    ts = escapeTime( plane, DEPTH);

    rgbs = intArrayToMonochrome( ts);

    drawArrayMulti( disp, rgbs, [0,0]);

#if TIER >= 2
    ts, vs = escapeTimeAndValue( plane, DEPTH);

    nvs = normalizedIterationCount( ts, vs);
    rgbs = doubleArrayToRGB( nvs);
  
    drawArrayMulti( disp, rgbs, [0,1]);

#if TIER >= 3

    rgbs = gaussBlur( gaussBlur25( rgbs));

    drawArrayMulti( disp, stretchRgb( rgbs, expand), [1,0]);

    rgbs = sobelEdges( rgbs);

    drawArrayMulti( disp, rgbs, [1,1]);
#endif
#endif

    q, zoom_coords = getSelectionMulti( disp, [2,2]);
    if (all( zoom_coords >= 0)) {
      cmin = [plane[ zoom_coords[[0]]]] ++ cmin;
      cmax = [plane[ zoom_coords[[1]]]] ++ cmax;
    } else {
      cmin = all( shape(cmin) > 1) ? drop( [1], cmin) : cmin;
      cmax = all( shape(cmax) > 1) ? drop( [1], cmax) : cmax;
    }
  }

  destroyDisplay( disp);

  return(0);
}

