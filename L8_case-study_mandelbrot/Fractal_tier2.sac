module Fractal;

use Structures: all;
use Numerical: all;

export all;


/** <!--*******************************************************************-->
 * 
 * @fn : complex[.,.] genComplexArray( int[2] shp, complex cmin, complex cmax)
 *
 *   @brief generates an array of complex numbers with shape "shp" and 
 *          linearly increasing/decreasing values between "cmin" and "cmax".
 *          The element at index [0,0] should be "cmin".
 *
 *****************************************************************************/
inline
complex[.,.] genComplexArray( int[2] shp, complex cmin, complex cmax)
{
  res = with {
          ( . <= iv <= .) : cmin + toc( (tod(iv) / tod(shp))  * todv(cmax-cmin));
        } : genarray( shp, toc( 0,0));
  return( res);
}


/** <!--*******************************************************************-->
 * 
 * @fn int escapeTime(complex z, int depth)
 *
 *   @brief iteratively computes c = c*c + z starting from c=z.
 *          terminates either when |c| > 2 or depth iterations
 *          have been performed.
 *          NB: Besides "norm" there exists "normSq" which computes |c|^2.
 *
 *   @return number of iterations done
 *****************************************************************************/
inline
int escapeTime(complex z, int depth)
{
  i=0; c=z;

  while( (normSq( c) <= 4d) && (i <= depth)) {
    c=c*c+z; i++;
  }

  return(i);
}

/** <!--*******************************************************************-->
 *
 * @fn int[*] escapeTime(complex[*] z, int depth)
 *
 *   @brief maps escapeTime to an entire array of complex numbers
 *
 *****************************************************************************/

inline
int[*] escapeTime( complex[*] plane, int depth)
{
  values = with {
             ( . <= iv <= .) : escapeTime( plane[iv], depth);
           } : genarray( shape( plane), 0);

  return( values);
}

/** <!--*******************************************************************-->
 *
 * @fn color[.,.] intArrayToMonochrome( int[.,.] a)
 *
 *   @brief converts integer values into color values using
 *          a logarithmic clut from black to red.
 *****************************************************************************/
inline
Color8::color[.,.] intArrayToMonochrome( int[.,.] a)
{
  clut = genLogarithmicClut( 0.4d, 0.9d, Color8::black(), Color8::red());

  d = with {
        ( .<= iv <= .) : clut[ a[ iv]];
      } : genarray( shape(a), Color8::black());

  return( d);
}

/******************************************************************************
 ******************************************************************************
 ******************************************************************************
 ******************************************************************************
 *****************************************************************************/

#if 0
inline
int, complex escapeTime(complex z, int depth)
{
  i=0; c=z;

  while( (normSq( c) <= 4d) && (i <= depth)) {
    c=c*c+z; i++;
  }

  return(i,c);
}

inline int[.,.], complex[.,.] escapeTime( complex[.,.] plane, int depth)
{
  escapes, values = with {
                      ( . <= x <= .) {
                        e,v = escapeTime( plane[x], depth);
                      } : (e, v);
                    } : ( genarray( shape( plane), 0),
                          genarray( shape( plane), toc(0)));

  return( escapes, values);
}

#endif

inline
double normalizedIterationCount(int n, complex zn)
{
  return( (normSq( zn) <= 4d) ? 0d : tod( n + 1) - log2( log2( norm( zn))));
}

#if 0
inline
double[*] normalizedIterationCount(int[*] n, complex[*] zn)
{
  return( where( (normSq( zn) <= 4d) , 0d , tod( n + 1) - log2( log2( norm( zn)))));
}
#else
inline
double[*] normalizedIterationCount(int[*] n, complex[*] zn)
{
  res = with {
          ( .<= iv <= .) : (normSq( zn[iv]) <= 4d) ? 0d :
                             tod( n + 1) - log2( log2( norm( zn[iv])));
        } : genarray( shape(n), 0d);
  return( res);
}
#endif


inline
Color8::color[.,.] doubleArrayToRGB( double[.,.] a)
{
  max = maxval( a);
  min = minval( a);

  scaled_vals = (a - min)/ (max-min);

  rgbs = Color8::Hsb2Rgb(toi( scaled_vals * 360d), 60, 80);

  return( rgbs);
}




